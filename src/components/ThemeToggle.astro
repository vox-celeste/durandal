<div
  id="theme-toggle"
  class="relative z-0 inline-grid grid-cols-3 gap-0.5 bg-neutral-950/5 p-0.75 text-neutral-950 dark:bg-white/10 dark:text-white"
>
  <button
    aria-label="System theme"
    data-theme="system"
    class="theme-button p-1.5 sm:p-0"
  >
    <svg viewBox="0 0 28 28" fill="none" class="size-7">
      <path
        d="M7.5 8.5C7.5 7.94772 7.94772 7.5 8.5 7.5H19.5C20.0523 7.5 20.5 7.94772 20.5 8.5V16.5C20.5 17.0523 20.0523 17.5 19.5 17.5H8.5C7.94772 17.5 7.5 17.0523 7.5 16.5V8.5Z"
        stroke="currentColor"></path>
      <path
        d="M7.5 8.5C7.5 7.94772 7.94772 7.5 8.5 7.5H19.5C20.0523 7.5 20.5 7.94772 20.5 8.5V14.5C20.5 15.0523 20.0523 15.5 19.5 15.5H8.5C7.94772 15.5 7.5 15.0523 7.5 14.5V8.5Z"
        stroke="currentColor"></path>
      <path
        d="M16.5 20.5V17.5H11.5V20.5M16.5 20.5H11.5M16.5 20.5H17.5M11.5 20.5H10.5"
        stroke="currentColor"
        stroke-linecap="round"></path>
    </svg>
  </button>

  <button
    aria-label="Light theme"
    data-theme="light"
    class="theme-button p-1.5 sm:p-0"
  >
    <svg viewBox="0 0 28 28" fill="none" class="size-7">
      <circle cx="14" cy="14" r="3.5" stroke="currentColor"></circle>
      <path d="M14 8.5V6.5" stroke="currentColor" stroke-linecap="round"></path>
      <path
        d="M17.889 10.1115L19.3032 8.69727"
        stroke="currentColor"
        stroke-linecap="round"></path>
      <path d="M19.5 14L21.5 14" stroke="currentColor" stroke-linecap="round"
      ></path>
      <path
        d="M17.889 17.8885L19.3032 19.3027"
        stroke="currentColor"
        stroke-linecap="round"></path>
      <path d="M14 21.5V19.5" stroke="currentColor" stroke-linecap="round"
      ></path>
      <path
        d="M8.69663 19.3029L10.1108 17.8887"
        stroke="currentColor"
        stroke-linecap="round"></path>
      <path d="M6.5 14L8.5 14" stroke="currentColor" stroke-linecap="round"
      ></path>
      <path
        d="M8.69663 8.69711L10.1108 10.1113"
        stroke="currentColor"
        stroke-linecap="round"></path>
    </svg>
  </button>

  <button
    aria-label="Dark theme"
    data-theme="dark"
    class="theme-button p-1.5 sm:p-0"
  >
    <svg viewBox="0 0 28 28" fill="none" class="size-7">
      <path
        d="M10.5 9.99914C10.5 14.1413 13.8579 17.4991 18 17.4991C19.0332 17.4991 20.0176 17.2902 20.9132 16.9123C19.7761 19.6075 17.109 21.4991 14 21.4991C9.85786 21.4991 6.5 18.1413 6.5 13.9991C6.5 10.8902 8.39167 8.22304 11.0868 7.08594C10.7089 7.98159 10.5 8.96597 10.5 9.99914Z"
        stroke="currentColor"
        stroke-linejoin="round"></path>
    </svg>
  </button>
</div>

<style>
  .theme-button.active {
    background-color: white;
    outline: 1px solid;
  }

  :global(.dark) .theme-button.active {
    background-color: var(--active-bg-dark, black);
    outline: 1px solid;
  }
</style>

<script data-astro-rerun is:inline>
  (function () {
    const theme = localStorage.getItem("currentTheme") || "system";
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)",
    ).matches;

    const isDark = theme === "dark" || (theme === "system" && prefersDark);

    if (isDark) {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
    } else {
      document.documentElement.classList.add("light");
      document.documentElement.classList.remove("dark");
    }
  })();
</script>

<script>
  type Theme = "light" | "dark" | "system" | null;

  function getCurrentTheme(): Theme {
    return (localStorage.getItem("currentTheme") ?? "system") as Theme;
  }

  function updateTheme(theme: Theme): void {
    if (theme !== null) {
      localStorage.setItem("currentTheme", theme);
    } else {
      localStorage.removeItem("currentTheme");
    }

    applyTheme(theme);
  }

  function applyTheme(theme: Theme): void {
    const isDark =
      theme === "dark" ||
      (theme === "system" &&
        window.matchMedia("(prefers-color-scheme: dark)").matches);

    if (isDark) {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
    } else {
      document.documentElement.classList.add("light");
      document.documentElement.classList.remove("dark");
    }

    (window as any)._updateTheme?.(theme);
  }

  function initThemeToggle(): void {
    const buttons = document.querySelectorAll(".theme-button");
    const currentTheme = getCurrentTheme();

    buttons.forEach((button) => {
      const buttonTheme = button.getAttribute("data-theme");
      if (buttonTheme === currentTheme) {
        button.classList.add("active");
      }

      button.addEventListener("click", () => {
        const selectedTheme = button.getAttribute("data-theme") as Theme;

        buttons.forEach((b) => b.classList.remove("active"));

        button.classList.add("active");

        updateTheme(selectedTheme);
      });
    });

    applyTheme(currentTheme);

    window
      .matchMedia("(prefers-color-scheme: dark)")
      .addEventListener("change", () => {
        if (getCurrentTheme() === "system") {
          applyTheme("system");
        }
      });
  }

  document.addEventListener("DOMContentLoaded", initThemeToggle);

  document.addEventListener("astro:page-load", initThemeToggle);

  if (
    document.readyState === "interactive" ||
    document.readyState === "complete"
  ) {
    initThemeToggle();
  }
</script>
